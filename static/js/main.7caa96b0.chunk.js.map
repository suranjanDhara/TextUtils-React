{"version":3,"sources":["Components/Alert.js","Components/NavBar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","margin","alert","className","concat","type","role","msg","NavBar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","placeholder","onClick","toggleMode","textMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","characterWithoutSpace","cnt","i","length","Fragment","heading","value","onChange","event","target","rows","disabled","newText","toUpperCase","toLowerCase","document","getElementById","select","getSelection","removeAllRanges","navigator","clipboard","writeText","replace","count","words","split","slice","noOfWords","sentences","noOfSentences","defaultProps","aboutText","App","setMode","_useState3","_useState4","setTextMode","_useState5","_useState6","setAlert","showAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.7caa96b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{height : '50px', margin : '10px'}}>\r\n\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n            {props.alert.msg}\r\n            </div>}\r\n            </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { a } from 'react-router-dom'\r\n\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\"><h2><strong>{props.title}</strong></h2></a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* <li class=\"nav-item\">\r\n              <a class=\"nav-link active\" aria-current=\"page\" href=\"/\"><strong>Home</strong></a>\r\n            </li> */}\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form>\r\n          <div className={`form-check form-switch mx-2`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className={`form-check-label text-${props.textMode}`} htmlFor=\"flexSwitchCheckDefault\">Enable {props.textMode} mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nNavBar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\"\r\n}","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\")\r\n\r\n    //No of characters without space\r\n    function characterWithoutSpace(){\r\n        let cnt = 0;\r\n        for(let i = 0; i<text.length; i++){\r\n            if(text[i] === ' '){\r\n                cnt++;\r\n            }\r\n        }\r\n        return (text.length-cnt)\r\n    }\r\n\r\n    function noOfWords(){\r\n        let count = 0;\r\n        let words = text.split(' ').length;\r\n        if(text.length === 0) return 0\r\n        for(let i=0; i<text.length; i++){\r\n            if(text[i] === ' '){\r\n                while(text[i] === ' '){\r\n                    if(text[i] === text[i+1]) count++;\r\n                    i++;\r\n                }\r\n                i -= 1;\r\n            }\r\n        }\r\n        if(text.slice(-1) === ' ') return (words-count-1)\r\n        else return (words-count)\r\n    }\r\n\r\n    //No of sentences in the text\r\n    function noOfSentences(){\r\n        let sentences = text.split('.').length\r\n        if(text.length === 0) return 0\r\n        if(text.slice(-1) === '.') return sentences-1\r\n        else if(text.slice(-1) === ' ') return sentences-1\r\n        else return sentences\r\n    }\r\n\r\n    const handleUpClick = ()=>{\r\n        const newText = text.toUpperCase()\r\n        setText(newText)\r\n    }\r\n\r\n    const handleLowClick = ()=>{\r\n        const newText = text.toLowerCase()\r\n        setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let newText = document.getElementById('myBox')\r\n        newText.select()\r\n        document.getSelection().removeAllRanges();\r\n        navigator.clipboard.writeText(newText.value)\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        setText(\"\")\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        let regexPattern = /\\s+/g\r\n        let newText = text.replace(regexPattern, \" \")\r\n        setText(newText)\r\n    }\r\n\r\n    //clear extra space\r\n\r\n    return (\r\n        <>\r\n            <h1 className={`mb-4 text-${props.mode === 'dark' ? 'light' : 'dark'}`}>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value = {text} onChange = {handleOnChange} id=\"myBox\" rows=\"5\"></textarea>\r\n            </div>\r\n            <button disabled = {text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button disabled = {text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLowClick}>Convert to lowercase</button>\r\n            <button disabled = {text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClearText}>Clear text</button>\r\n            <button disabled = {text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy to clipboard</button>\r\n            <button disabled = {text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpace}>Remove extra space</button>\r\n            <div className={`container my-3 text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n                <h1>Your text summary</h1>\r\n                <p>{noOfWords()} words {text.length} characters(including spaces)</p>\r\n                <p>{characterWithoutSpace()} characters(excluding spaces)</p>\r\n                <p>{noOfSentences()} sentences</p>\r\n                <p>{0.008 * characterWithoutSpace()} Minutes</p>\r\n                <h2>Preview</h2>\r\n                <p>{(text.length > 0) ? text : \"Nothing to preview - use TextUtils\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading : PropTypes.string\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './Components/Alert';\nimport NavBar from './Components/NavBar';\nimport TextForm from './Components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n  const [textMode, setTextMode] = useState('dark')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light')\n      setTextMode('dark')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\", \"success\")\n    }\n    else {\n      setMode('dark')\n      setTextMode('light')\n      document.body.style.backgroundColor = '#052047'\n      showAlert(\"Dark mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <NavBar title=\"TextUtils\" mode={mode} textMode={textMode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        {/* <Routes> */}\n          {/* <Route exact path=\"/about\" element = {<About />}/> */}\n          <div className=\"container mx-50\">\n              <TextForm heading=\"Try TextUtils - Counter \" mode={mode} />\n            </div>\n        {/* </Routes> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}